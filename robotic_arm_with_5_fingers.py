# -*- coding: utf-8 -*-
"""Robotic Arm with 5 fingers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nha_qzKaiQIoYiFSK6f4t6aoNvhSS42V
"""

!pip install matplotlib
import matplotlib.pyplot as plt
import numpy as np

# Simulated pressure sensor data for each finger
# For real application, replace this with actual sensor data acquisition code
thumb_force = np.random.uniform(1.4, 1.6, 100)  # Simulated data around 1.53 N
index_force = np.random.uniform(1.4, 1.6, 100)  # Simulated data around 1.53 N
middle_force = np.random.uniform(1.2, 1.3, 100) # Simulated data around 1.23 N
ring_force = np.random.uniform(0.9, 1.0, 100)   # Simulated data around 0.92 N
pinky_force = np.random.uniform(0.9, 1.0, 100)  # Simulated data around 0.92 N

# Time axis
time = np.arange(0, 100, 1)

# Plotting the data
plt.figure(figsize=(12, 6))

plt.plot(time, thumb_force, label='Thumb Force (N)', color='r')
plt.plot(time, index_force, label='Index Force (N)', color='g')
plt.plot(time, middle_force, label='Middle Force (N)', color='b')
plt.plot(time, ring_force, label='Ring Force (N)', color='c')
plt.plot(time, pinky_force, label='Pinky Force (N)', color='m')

plt.xlabel('Time (s)')
plt.ylabel('Force (N)')
plt.title('Grip Force Applied by Each Finger Over Time')
plt.legend()
plt.grid(True)

plt.show()

import numpy as np
import matplotlib.pyplot as plt

# PID Controller class
class PIDController:
    def __init__(self, Kp, Ki, Kd, set_point):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.set_point = set_point
        self.prev_error = 0
        self.integral = 0

    def update(self, measured_value):
        error = self.set_point - measured_value
        self.integral += error
        derivative = error - self.prev_error
        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
        self.prev_error = error
        return output

# Simulated system parameters
time = np.linspace(0, 10, 100)  # 10 seconds, 100 samples
desired_force = 1.53  # Desired force for the thumb (N)
initial_force = 0.0  # Initial force

# PID controller parameters
Kp = 1.2
Ki = 0.5
Kd = 0.1

# Initialize PID controller
pid = PIDController(Kp, Ki, Kd, desired_force)

# Initialize variables for simulation
forces = [initial_force]
control_inputs = []
errors = []

# Simulate PID control
for t in time[1:]:
    current_force = forces[-1]
    control_input = pid.update(current_force)
    control_inputs.append(control_input)
    # Simulate system response (simple model)
    new_force = current_force + control_input * 0.1  # Adjust the factor as per system dynamics
    forces.append(new_force)
    errors.append(desired_force - current_force)

# Plot results
plt.figure(figsize=(12, 8))

plt.subplot(3, 1, 1)
plt.plot(time, forces, label='Measured Force (N)')
plt.axhline(y=desired_force, color='r', linestyle='--', label='Desired Force (N)')
plt.xlabel('Time (s)')
plt.ylabel('Force (N)')
plt.title('Force vs Time')
plt.legend()
plt.grid()

plt.subplot(3, 1, 2)
plt.plot(time[1:], control_inputs, label='Control Input')
plt.xlabel('Time (s)')
plt.ylabel('Control Input')
plt.title('Control Input vs Time')
plt.legend()
plt.grid()

plt.subplot(3, 1, 3)
plt.plot(time[1:], errors, label='Error')
plt.xlabel('Time (s)')
plt.ylabel('Error (N)')
plt.title('Error vs Time')
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Function to plot a basketball and fingers
def plot_basketball_and_fingers(thumb_force, index_force, middle_force, ring_force, pinky_force):
    fig, ax = plt.subplots()

    # Basketball parameters
    basketball_radius = 12.0  # Approximate radius of a basketball in cm
    circle = plt.Circle((0, 0), basketball_radius, color='orange', fill=False, linewidth=2)

    # Finger positions (approximated)
    finger_positions = {
        'thumb': (basketball_radius * np.cos(np.pi / 4), basketball_radius * np.sin(np.pi / 4)),
        'index': (basketball_radius * np.cos(np.pi / 8), basketball_radius * np.sin(np.pi / 8)),
        'middle': (basketball_radius, 0),
        'ring': (basketball_radius * np.cos(-np.pi / 8), basketball_radius * np.sin(-np.pi / 8)),
        'pinky': (basketball_radius * np.cos(-np.pi / 4), basketball_radius * np.sin(-np.pi / 4))
    }

    # Finger forces
    finger_forces = {
        'thumb': thumb_force,
        'index': index_force,
        'middle': middle_force,
        'ring': ring_force,
        'pinky': pinky_force
    }

    ax.add_patch(circle)

    # Plot each finger as a point with a line indicating force
    for finger, position in finger_positions.items():
        force = finger_forces[finger]
        ax.plot(position[0], position[1], 'o', label=f'{finger.capitalize()} ({force:.2f} N)')
        ax.plot([0, position[0]], [0, position[1]], linestyle='--', linewidth=force, label=f'{finger.capitalize()} force line')

    ax.set_aspect('equal', 'box')
    plt.xlim(-basketball_radius * 1.5, basketball_radius * 1.5)
    plt.ylim(-basketball_radius * 1.5, basketball_radius * 1.5)
    plt.xlabel('X Position (cm)')
    plt.ylabel('Y Position (cm)')
    plt.title('Visualization of Robotic Fingers Holding a Basketball')
    plt.legend()
    plt.grid(True)
    plt.show()

# Example forces for visualization
thumb_force = 1.53
index_force = 1.53
middle_force = 1.23
ring_force = 0.92
pinky_force = 0.92

# Plot the visualization
plot_basketball_and_fingers(thumb_force, index_force, middle_force, ring_force, pinky_force)

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def plot_3d_basketball_and_fingers(thumb_force, index_force, middle_force, ring_force, pinky_force):
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')

    # Basketball parameters
    basketball_radius = 12.0  # Approximate radius of a basketball in cm

    # Sphere coordinates
    u = np.linspace(0, 2 * np.pi, 100)
    v = np.linspace(0, np.pi, 100)
    x = basketball_radius * np.outer(np.cos(u), np.sin(v))
    y = basketball_radius * np.outer(np.sin(u), np.sin(v))
    z = basketball_radius * np.outer(np.ones(np.size(u)), np.cos(v))

    # Plotting the basketball
    ax.plot_surface(x, y, z, color='orange', alpha=0.5)

    # Finger positions (approximated on the surface of the basketball)
    finger_positions = {
        'thumb': (basketball_radius * np.cos(np.pi / 4) * np.sin(np.pi / 4), basketball_radius * np.sin(np.pi / 4) * np.sin(np.pi / 4), basketball_radius * np.cos(np.pi / 4)),
        'index': (basketball_radius * np.cos(np.pi / 8) * np.sin(np.pi / 4), basketball_radius * np.sin(np.pi / 8) * np.sin(np.pi / 4), basketball_radius * np.cos(np.pi / 4)),
        'middle': (basketball_radius, 0, 0),
        'ring': (basketball_radius * np.cos(-np.pi / 8) * np.sin(np.pi / 4), basketball_radius * np.sin(-np.pi / 8) * np.sin(np.pi / 4), basketball_radius * np.cos(np.pi / 4)),
        'pinky': (basketball_radius * np.cos(-np.pi / 4) * np.sin(np.pi / 4), basketball_radius * np.sin(-np.pi / 4) * np.sin(np.pi / 4), basketball_radius * np.cos(np.pi / 4))
    }

    # Finger forces
    finger_forces = {
        'thumb': thumb_force,
        'index': index_force,
        'middle': middle_force,
        'ring': ring_force,
        'pinky': pinky_force
    }

    # Plot each finger as a point with a line indicating force
    for finger, position in finger_positions.items():
        force = finger_forces[finger]
        ax.scatter(position[0], position[1], position[2], s=100, label=f'{finger.capitalize()} ({force:.2f} N)')
        ax.plot([0, position[0]], [0, position[1]], [0, position[2]], linestyle='--', linewidth=force, label=f'{finger.capitalize()} force line')

    ax.set_xlabel('X Position (cm)')
    ax.set_ylabel('Y Position (cm)')
    ax.set_zlabel('Z Position (cm)')
    ax.set_title('3D Visualization of Robotic Fingers Holding a Basketball')
    ax.legend()
    plt.show()

# Example forces for visualization
thumb_force = 1.53
index_force = 1.53
middle_force = 1.23
ring_force = 0.92
pinky_force = 0.92

# Plot the 3D visualization
plot_3d_basketball_and_fingers(thumb_force, index_force, middle_force, ring_force, pinky_force)